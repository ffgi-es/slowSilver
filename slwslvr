#!/usr/bin/env ruby
require_relative 'lib/lexer'
require_relative 'lib/parser'
require_relative 'lib/generator'
require_relative 'lib/pprint'

print_ast = false
delete_assembly = true

file = ARGV.reduce('') do |f, arg|
  case arg
  when '-ast' then print_ast = true
  when '-nd' then delete_assembly = false
  else
    f = arg
  end
  f
end

lexer = Lexer.new file

tokens = lexer.lex

begin
  ast = Parser.parse tokens
rescue ParseError
  warn 'parsing error'
  exit 1
end

puts PPrinter.format ast if print_ast

begin
  ast.validate
rescue CompileError => e
  warn e.message
  exit 2
end

generator = Generator.new ast

filename = file.split('/').last.gsub(/.sag$/, '')

assembly_file = filename + '.asm'
linking_file = filename + '.o'

File.open(assembly_file, 'w') { |f| f.write(generator.code) }

assembly_compiler = 'nasm -f elf64 -p asm/macro.asm'
mem_manager = 'asm/memory-manager.o'

if system("#{assembly_compiler} #{assembly_file}")
  system(`ld -e #{generator.entry_point} #{linking_file} #{mem_manager}`)
  File.delete linking_file if File.exist? linking_file
end

if delete_assembly
  File.delete assembly_file if File.exist? assembly_file
end
